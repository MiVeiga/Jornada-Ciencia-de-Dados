Introdução: 
Imagine que estamos construindo uma cidade virtual 
chamada "Codeville". Nessa cidade, os objetos são como 
os prédios e as estruturas que compõem a cidade. 
Cada objeto tem suas próprias características 
(atributos) e ações (métodos). 
Agora, vamos explorar os quatro 
pilares da POO usando o cenário de Codeville.

1. Herança - Construindo Relações de Família: 
Na cidade de Codeville, imagine que 
você é um arquiteto de renome. 
Você projeta uma variedade de edifícios 
incríveis, como casas, escolas e escritórios. 
Agora, quando você projeta uma nova escola, 
não começa do zero, certo? Você reutiliza 
partes do design de outras escolas que já criou. 
Isso é semelhante à herança na POO.

Assim, podemos explicar que a herança 
permite que uma classe (tipo de edifício) 
herde características e comportamentos de outra classe. 
Por exemplo, uma classe "Escola" pode herdar da classe "Prédio", 
obtendo os atributos e métodos básicos, enquanto ainda adiciona 
seus próprios atributos exclusivos.

2. Encapsulamento - Protegendo Valiosos Segredos: 
Agora, imagine que você é o proprietário de uma fábrica 
em Codeville. Você não permite que estranhos entrem e 
acessem os processos internos de fabricação, certo? 
Da mesma forma, o encapsulamento em POO permite que 
você esconda certos detalhes internos das suas 
classes para proteger o funcionamento interno.

Dessa forma, você pode explicar que o encapsulamento 
é como proteger o funcionamento interno de uma classe, 
fornecendo uma interface pública para interagir com ela. 
Por exemplo, você pode ter uma classe "Fábrica" ​​com métodos 
públicos para "Iniciar Produção" e "Parar Produção", mas os 
detalhes de como isso acontece internamente estão escondidos.

3. Polimorfismo - A Magia da Adaptação: 
Imagine que, em Codeville, você está dirigindo um 
veículo. Agora, você sabe que diferentes veículos 
têm diferentes formas de se mover: carros, bicicletas, 
patinetes, etc. No entanto, mesmo que a forma como eles 
se movam seja diferente, você ainda pode usar um método 
geral para "se mover" com todos eles. Isso é polimorfismo.

Assim, você pode ilustrar que o polimorfismo permite que 
diferentes classes compartilhem nomes de métodos, mas implementem 
esses métodos de maneira específica para suas próprias necessidades. 
Por exemplo, todas as classes "Veículo" podem ter um método "Mover", 
mas cada veículo específico o implementa de forma diferente.

4. Abstração - Simplificando a Complexidade: 
Na cidade de Codeville, você é um professor em uma escola. 
Você ensina vários assuntos, como matemática, história e ciências.
 Agora, quando está ensinando, não entra em detalhes exaustivos 
 sobre cada tópico, certo? Você simplifica as coisas para que os alunos 
 possam entender. Isso é abstração.

Você pode explicar que a abstração na POO envolve focar nos 
aspectos essenciais de um objeto e ocultar os detalhes complexos. 
Por exemplo, ao criar uma classe "Aluno", você pode se concentrar 
em atributos como "Nome" e "Idade", em vez de se preocupar com todos os 
detalhes internos da implementação.