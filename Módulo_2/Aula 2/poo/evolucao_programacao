#Programação de Baixo Nível:

Na Programação de Baixo Nível, os programas 
são escritos diretamente em linguagem de máquina 
ou linguagem Assembly, que são muito próximas ao 
código binário que o computador entende. Isso requer
 um conhecimento profundo da arquitetura do hardware e
  torna o código altamente dependente da plataforma em que é executado.
Exemplo lúdico: Imagine que você está criando 
um jogo de adivinhação de números em que o jogador 
deve acertar um número secreto entre 1 e 100. 
Na programação de baixo nível, você escreveria o 
código usando instruções binárias que se comunicam 
diretamente com a memória e a CPU do computador para 
realizar as operações necessárias.

# Programação Linear:

Programação Linear:
A Programação Linear é uma abordagem sequencial, 
em que as instruções são executadas uma após 
a outra, seguindo uma ordem específica. Ela pode 
incluir estruturas de controle, como loops e 
condicionais, mas ainda segue uma sequência fixa de passos.
Exemplo lúdico: Agora, no jogo de adivinhação de 
números, você escreveria o código em Python usando 
apenas comandos sequenciais. O jogo poderia pedir ao 
jogador que insira um palpite, comparar o palpite com 
o número secreto e, em seguida, informar ao jogador se 
o palpite está correto ou não. Ele repetiria esse 
processo até o jogador adivinhar o número correto.

# Programação Estruturada:
A Programação Estruturada é uma evolução 
da programação linear, onde se busca tornar 
o código mais organizado e fácil de ler, 
dividindo-o em blocos estruturados e utilizando 
estruturas de controle como loops e condicionais.
Exemplo lúdico: No jogo de adivinhação, você 
dividiria o código em funções. Por exemplo, 
teria uma função para solicitar o palpite do jogador, 
outra função para verificar se o palpite está correto e 
uma terceira função para exibir uma mensagem ao jogador 
com o resultado. Isso tornaria o código mais organizado e 
facilitaria a manutenção e leitura.

# Programação Modular:
A Programação Modular é uma evolução da programação 
estruturada, onde o código é dividido em módulos 
independentes e reutilizáveis, permitindo que cada módulo 
tenha uma responsabilidade específica.

Exemplo lúdico: No jogo de adivinhação, você criaria 
um módulo separado para gerenciar o placar do jogador, 
outro módulo para controlar o fluxo do jogo e um terceiro 
módulo para lidar com a interface gráfica. 
Cada módulo seria responsável por uma parte bem definida 
do jogo e poderia ser facilmente reutilizado em outros jogos semelhantes.

# Programação Orientada a Objetos (POO):
A Programação Orientada a Objetos é uma abordagem mais 
avançada que se baseia em conceitos de objetos e classes. 
Os objetos representam entidades do mundo real e possuem 
atributos e métodos que definem seu comportamento.
Exemplo lúdico: No jogo de adivinhação, você criaria 
uma classe "Jogo" que representa o próprio jogo, 
com atributos como o número secreto e o número de 
tentativas do jogador. Essa classe teria métodos para gerenciar 
o jogo, como verificar se o palpite do jogador está correto e 
atualizar o placar. Além disso, você poderia ter outra classe 
chamada "Jogador" que representaria o jogador, com atributos como 
o nome e a pontuação. As classes "Jogo" e "Jogador" poderiam 
interagir entre si para controlar todo o jogo de adivinhação.